<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="86" tokens="246">
<file line="860" path="/home/muki/Development/git/jama-osgi/de.mukis.jama/src/main/java/jama/FloatMatrix.java"/>
<file line="1068" path="/home/muki/Development/git/jama-osgi/de.mukis.jama/src/main/java/jama/Matrix.java"/>
<codefragment>
<![CDATA[
                X[i][j] = (i == j ? 1.0f : 0.0f);
            }
        }
        return A;
    }

    /**
     * Print the matrix to stdout. Line the elements up in columns with a
     * Fortran-like 'Fw.d' style format.
     * 
     * @param w Column width.
     * @param d Number of digits after the decimal.
     */

    public void print(int w, int d) {
        print(new PrintWriter(System.out, true), w, d);
    }

    /**
     * Print the matrix to the output stream. Line the elements up in columns
     * with a Fortran-like 'Fw.d' style format.
     * 
     * @param output Output stream.
     * @param w Column width.
     * @param d Number of digits after the decimal.
     */

    public void print(PrintWriter output, int w, int d) {
        DecimalFormat format = new DecimalFormat();
        format.setDecimalFormatSymbols(new DecimalFormatSymbols(Locale.US));
        format.setMinimumIntegerDigits(1);
        format.setMaximumFractionDigits(d);
        format.setMinimumFractionDigits(d);
        format.setGroupingUsed(false);
        print(output, format, w + 2);
    }

    /**
     * Print the matrix to stdout. Line the elements up in columns. Use the
     * format object, and right justify within columns of width characters. Note
     * that is the matrix is to be read back in, you probably will want to use a
     * NumberFormat that is set to US Locale.
     * 
     * @param format A Formatting object for individual elements.
     * @param width Field width for each column.
     * @see java.text.DecimalFormat#setDecimalFormatSymbols
     */

    public void print(NumberFormat format, int width) {
        print(new PrintWriter(System.out, true), format, width);
    }

    // DecimalFormat is a little disappointing coming from Fortran or C's
    // printf.
    // Since it doesn't pad on the left, the elements will come out different
    // widths. Consequently, we'll pass the desired column width in as an
    // argument and do the extra padding ourselves.

    /**
     * Print the matrix to the output stream. Line the elements up in columns.
     * Use the format object, and right justify within columns of width
     * characters. Note that is the matrix is to be read back in, you probably
     * will want to use a NumberFormat that is set to US Locale.
     * 
     * @param output the output stream.
     * @param format A formatting object to format the matrix elements
     * @param width Column width.
     * @see java.text.DecimalFormat#setDecimalFormatSymbols
     */

    public void print(PrintWriter output, NumberFormat format, int width) {
        output.println(); // start on new line.
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                String s = format.format(A[i][j]); // format the number
                int padding = Math.max(1, width - s.length()); // At _least_ 1
                                                               // space
                for (int k = 0; k < padding; k++) {
                    output.print(' ');
                }
                output.print(s);
            }
            output.println();
        }
        output.println(); // end with blank line.
    }
]]>
</codefragment>
</duplication>
<duplication lines="25" tokens="108">
<file line="74" path="/home/muki/Development/git/jama-osgi/de.mukis.jama/src/main/java/jama/util/MatrixWriter.java"/>
<file line="98" path="/home/muki/Development/git/jama-osgi/de.mukis.jama/src/main/java/jama/util/MatrixWriter.java"/>
<codefragment>
<![CDATA[
    public void writeMatrix(Matrix matrix) {
        println(); // start on new line.
        for (int row = 0; row < matrix.getRowDimension(); row++) {
            for (int col = 0; col < matrix.getColumnDimension(); col++) {
                String s = format.format(matrix.get(row, col));

                // At least 1 space
                int padding = Math.max(1, width - s.length());
                for (int k = 0; k < padding; k++) {
                    print(' ');
                }
                print(s);
            }
            println();
        }
        println(); // end with blank line.
        flush();
    }

    /**
     * Writes the given matrix.
     * 
     * @param matrix
     */
    public void writeMatrix(FloatMatrix matrix) {
]]>
</codefragment>
</duplication>
</pmd-cpd>